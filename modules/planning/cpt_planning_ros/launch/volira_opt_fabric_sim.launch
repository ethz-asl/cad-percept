<launch>
  <arg name="mav_name" default="voliro_tri"/>
  <arg name="namespace" default="voliro_tri"/>
  <arg name="model" default="$(find voliro_description)/urdf/voliro_tri_depth_camera_base.xacro"/>
  <arg name="tf_prefix" default="$(optenv ROS_NAMESPACE)"/>

  <arg name="world" default="$(find omav_gazebo_wada)/worlds/wada.world" />
  <arg name="show_gazebo" default="true"/>
  <arg name="pause_gazebo" default="false" />

  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="log_file" default="$(arg mav_name)"/>
  <arg name="wait_to_record_bag" default="false"/>
  <arg name="enable_mavlink_interface" default="false"/>

  <arg name="start_x" default="0.0" />
  <arg name="start_y" default="0.0" />
  <arg name="start_z" default="0.1" />

  <!-- ========== Simulation ========== -->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models:$(find omav_gazebo_wada)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world)"/>
    <arg name="gui" value="$(arg show_gazebo)"/>
    <arg name="paused" value="$(arg pause_gazebo)" />
  </include>

  <!-- ========== MAV ========== -->
  <!-- Send the robot XML to param server. -->
  <param name="robot_description" command="
    $(find xacro)/xacro $(arg model) enable_logging:=$(arg enable_logging) enable_ground_truth:=$(arg enable_ground_truth) enable_mavlink_interface:=$(arg enable_mavlink_interface) log_file:=$(arg log_file) wait_to_record_bag:=$(arg wait_to_record_bag) mav_name:=$(arg mav_name) namespace:=$(arg namespace)
    " />
  <param name="tf_prefix" type="string" value="$(arg tf_prefix)" />

  <!-- Push robot_description to factory and spawn robot in gazebo. -->
  <node name="spawn_$(arg namespace)" pkg="gazebo_ros" type="spawn_model" args="-param robot_description
         -urdf
         -x $(arg start_x)
         -y $(arg start_y)
         -z $(arg start_z)
         -model $(arg namespace)" respawn="false" output="screen">
  </node>

  <!-- ========== State Publisher ========== -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/$(arg mav_name)/joint_states" />
  </node>

  <!-- ========== Controller ========== -->
  <include file="$(find voliro_gazebo_control)/launch/voliro_tri_control.launch">
    <arg name="mav_name" value="$(arg mav_name)" />
  </include>

  <!-- ========== TF Broadcaster ========== -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="enu_broadcaster" args="0 0 0 0 0 0 1 enu world" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="mesh_broadcaster" args="0 0 0 0 0 0 1 enu mesh" />

  <!-- ========== Planner ========== -->
  <node name="rmp_planner" pkg="cpt_planning_ros" type="omav_planner_node" respawn="false" output="screen">
    <param name="mesh_path" type="string" value="$(find omav_gazebo_wada)/models/wada_mesh/meshes/ache2019_nav_mesh_halfpipe.off" />
    <param name="mesh_frame" type="string" value="mesh" />

    <param name="body_frame" type="string" value="voliro_tri/base_link" />
    <param name="enu_frame" type="string" value="enu" />
    <param name="odom_frame" type="string" value="world" />
    <param name="current_reference_frame" value="current_reference" />

    <param name="zero_angle" type="double" value="-1.57" />
    <param name="zero_x" type="double" value="-17.785" />
    <param name="zero_y" type="double" value="2.111" />
    <param name="zero_z" type="double" value="-0.4248" />
	  
    <remap from="cmd_trajectory" to="/$(arg mav_name)/command/trajectory" />
	  
    <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
    <remap from="joy" to="/joy" />
  </node>



<!-- TF Synchronization -->
<!-- world frame = map frame -->
    <!-- Camera pose (use the depth frame, which z-axis points forward) publisher -->
    <!-- This node publishes tf from parent_frame to child_frame-->
    <node pkg="cpt_planning_ros" name="camera_pose_publisher" type="camera_pose_publisher.py" output="screen">
        <param name="parent_frame" value="world" />
        <param name="child_frame" value="voliro_tri/depth_camera_link" />
        <param name="pose_topic" value="camera/pose" />
    </node>

   <node pkg="tf" type="static_transform_publisher" name="tf_enu_world"
    args="0 0 0 0 0 0 enu world 1000"/> 

    <node pkg="tf" type="static_transform_publisher" name="tf_world_map"
    args="0 0 0 0 0 0 world map 1000"/> 

<!-- Planner configs -->
    <arg name="map_size_x" default="40.0"/>
    <arg name="map_size_y" default="40.0"/>
    <arg name="map_size_z" default=" 20.0"/>

    <!-- use depth image and camera pose as input -->
    <arg name="odom_topic" default="/$(arg mav_name)/ground_truth/odometry" />
    <!-- TODO change to camera coordinate: e.g. camera_depth_optical_frame -->
    <arg name="camera_pose_topic" default="/camera/pose"/>
    <arg name="depth_topic" default="/voliro_tri/pico_flexx/depth/image_raw"/>
    <!-- <arg name="cloud_topic" default="/camera/depth/color/points"/> -->

    <arg name="max_vel" default="0.5" />
    <arg name="max_acc" default="0.5" />

<!-- Fast planner -->
    <include file="$(find omav_gazebo_wada)/launch/fp_topo_replan.launch" >
        <arg name="map_size_x" default="$(arg map_size_x)"/>
        <arg name="map_size_y" default="$(arg map_size_y)"/>
        <arg name="map_size_z" default="$(arg map_size_z)"/>

        <arg name="odom_topic" default="$(arg odom_topic)" />
        <arg name="depth_topic" default="$(arg depth_topic)"/>
        <arg name="camera_pose_topic" default="$(arg camera_pose_topic)"/>
        <!-- <arg name="cloud_topic" default="$(arg cloud_topic)"/> -->

        <!-- maximum velocity and acceleration the drone will reach -->
        <arg name="max_vel" value="$(arg max_vel)" />
        <arg name="max_acc" value="$(arg max_acc)" />

    </include>






  <node name="joy_node" pkg="joy" type="joy_node" respawn="false" output="screen"/>

</launch>
